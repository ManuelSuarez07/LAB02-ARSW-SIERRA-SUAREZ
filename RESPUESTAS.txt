 1. Posibles condiciones de carrera
Se encontraron las siguientes condiciones de carrera en el código del juego Snake:

* Snake accede a recursos compartidos, como el tablero y las celdas. Si muchas serpientes intentan cambiar el estado de la celda al mismo tiempo (por ejemplo, comiéndose el ratón o corriendo hacia un lugar seguro), puede producirse una condición de carrera.

* La lista snakeBody de cada serpiente se modifica en el hilo de ejecución de la serpiente. Si dos serpientes intentan acceder y modificar el mismo objeto Cell al mismo tiempo, esto puede llevar a inconsistencias.

2. Mal uso de colecciones
* Las colecciones como LinkedList<Cell> en Snake no estan sincronizadas, lo cual puede causar problemas si varias serpientes intentan acceder y modificar la lista de celdas al mismo tiempo. Durante las pruebas, se produjeron errores de lógica del juego al aumentar la velocidad del juego, como que las serpientes se "comieran" entre sí o se movieran en la dirección incorrecta.

*  El acceso a las celdas del tablero (board.gameboard) no estaba protegido, lo que podía generar condiciones de carrera si varias serpientes intentaban acceder a la misma celda al mismo tiempo.

3. No se utiliza la importancia de la tarea de espera
En el método run() de la clase Snake, se utilizan synchronized y wait() para pausar el hilo de Snake. Si no se configura correctamente. Esto puede ser considerado una espera activa ya que puede llevar a un uso ineficiente de los recursos del sistema. En su lugar, se podría utilizar un mecanismo de notificación más eficiente.

4. Regiones críticas relacionadas con la condición racial
Esto puede ser considerado una espera activa si no se gestiona adecuadamente, ya que puede llevar a un uso ineficiente de los recursos del sistema. En su lugar, se podría utilizar un mecanismo de notificación más eficiente.

El acceso a las celdas del tablero también es una región crítica. Se debe sincronizar el acceso a las celdas para evitar que múltiples serpientes modifiquen el mismo objeto Cell al mismo tiempo.


Solución implementada
Sincronización de Acceso a Recursos Compartidos:

Utilizamos un bloque synchronized en el método snakeCalc() de la clase Snake para proteger el acceso a snakeBody y evitar las condiciones de carrera.

synchronized(this) {
    snakeBody.push(newCell);
}

También se cambió LinkedList<Cell> por Collections.synchronizedList(new LinkedList<Cell>()) para que la lista sea segura para el acceso concurrente.Al igual que Se mantuvo el uso de wait() y notify() en el método start() y stop(), pero se revisó su implementación para asegurar que no se generen esperas activas innecesarias.



Por ultimo ae agregó una interfaz gráfica que muestra la serpiente más larga y la peor serpiente cuando terminas el juego. Esto se hace usando un JLabel en la clase SnakeApp.
